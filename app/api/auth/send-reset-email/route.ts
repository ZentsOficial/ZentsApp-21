import { supabaseAdmin } from "@/lib/supabase"
import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    console.log("üöÄ Iniciando processo de envio de email de recupera√ß√£o")

    // Parse do corpo da requisi√ß√£o
    let body
    try {
      body = await request.json()
    } catch (parseError) {
      console.error("‚ùå Erro ao fazer parse do JSON:", parseError)
      return NextResponse.json({ message: "Formato de requisi√ß√£o inv√°lido" }, { status: 400 })
    }

    const { idAcesso } = body

    console.log(`üîê Dados recebidos - ID: ${idAcesso}`)

    if (!idAcesso) {
      console.log("‚ùå ID de acesso n√£o fornecido")
      return NextResponse.json({ message: "ID de acesso √© obrigat√≥rio" }, { status: 400 })
    }

    // Buscar usu√°rio pelo ID de acesso
    console.log(`üîç Buscando usu√°rio com ID de acesso: ${idAcesso}`)

    let user
    try {
      const { data, error } = await supabaseAdmin
        .from("dados_usuario")
        .select("id, nome_completo, email")
        .eq("id_acesso", idAcesso)
        .single()

      if (error) {
        console.error("‚ùå Erro ao buscar usu√°rio:", error)
        return NextResponse.json({ message: "Usu√°rio n√£o encontrado" }, { status: 404 })
      }

      if (!data) {
        console.log("‚ùå Usu√°rio n√£o encontrado")
        return NextResponse.json({ message: "Usu√°rio n√£o encontrado" }, { status: 404 })
      }

      user = data
      console.log(`‚úÖ Usu√°rio encontrado: ${user.nome_completo}`)
    } catch (dbError) {
      console.error("‚ùå Erro na consulta ao banco:", dbError)
      return NextResponse.json({ message: "Erro ao acessar banco de dados" }, { status: 500 })
    }

    // Verificar se o usu√°rio tem email
    if (!user.email) {
      console.error("‚ùå Usu√°rio n√£o possui email cadastrado")
      return NextResponse.json({ message: "Usu√°rio n√£o possui email cadastrado" }, { status: 400 })
    }

    console.log(`üìß Email encontrado: ${user.email}`)

    // Tentar enviar email de recupera√ß√£o diretamente
    console.log(`üìß Tentando enviar email de recupera√ß√£o para: ${user.email}`)

    try {
      const { error: resetError } = await supabaseAdmin.auth.resetPasswordForEmail(user.email, {
        redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000"}/reset-password`,
      })

      if (resetError) {
        // Se o erro for porque o usu√°rio n√£o existe, criar o usu√°rio primeiro
        if (resetError.message.includes("User not found") || resetError.message.includes("Invalid email")) {
          console.log(`üÜï Usu√°rio n√£o existe no Supabase Auth, criando: ${user.email}`)

          // Gerar senha aleat√≥ria tempor√°ria
          const tempPassword = Math.random().toString(36).slice(-10) + Math.random().toString(36).slice(-10)

          const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
            email: user.email,
            password: tempPassword,
            email_confirm: true,
          })

          if (createError) {
            console.error(`‚ùå Erro ao criar usu√°rio no Supabase Auth: ${createError.message}`)
            return NextResponse.json({ message: "Erro ao criar usu√°rio para recupera√ß√£o de senha" }, { status: 500 })
          }

          console.log(`‚úÖ Usu√°rio criado no Supabase Auth: ${user.email}`)

          // Tentar enviar email novamente ap√≥s criar o usu√°rio
          const { error: resetError2 } = await supabaseAdmin.auth.resetPasswordForEmail(user.email, {
            redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000"}/reset-password`,
          })

          if (resetError2) {
            console.error(`‚ùå Erro ao enviar email ap√≥s criar usu√°rio: ${resetError2.message}`)
            return NextResponse.json({ message: "Erro ao enviar email de recupera√ß√£o" }, { status: 500 })
          }
        } else {
          console.error(`‚ùå Erro ao enviar email de recupera√ß√£o: ${resetError.message}`)
          return NextResponse.json({ message: "Erro ao enviar email de recupera√ß√£o" }, { status: 500 })
        }
      }

      console.log(`‚úÖ Email de recupera√ß√£o enviado com sucesso para: ${user.email}`)

      return NextResponse.json({
        message: "Email de recupera√ß√£o enviado com sucesso",
        success: true,
      })
    } catch (authError) {
      console.error("‚ùå Erro ao acessar Supabase Auth:", authError)
      return NextResponse.json({ message: "Erro ao processar autentica√ß√£o" }, { status: 500 })
    }
  } catch (error) {
    console.error("‚ùå Erro geral ao processar requisi√ß√£o:", error)
    return NextResponse.json({ message: "Erro interno do servidor" }, { status: 500 })
  }
}
