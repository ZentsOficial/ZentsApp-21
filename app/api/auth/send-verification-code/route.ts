import { supabaseAdmin } from "@/lib/supabase"
import { NextResponse } from "next/server"
import { cookies } from "next/headers"
import { encodeBase64 } from "@/lib/utils"

// Fun√ß√£o para gerar c√≥digo de verifica√ß√£o
function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// Fun√ß√£o para simular envio de email
async function sendEmailWithCode(email: string, code: string, name: string) {
  console.log(`üìß Email enviado para ${email}:`)
  console.log(`Ol√° ${name}, seu c√≥digo de verifica√ß√£o √©: ${code}`)
  console.log(`Este c√≥digo expira em 10 minutos.`)
  return true
}

// Fun√ß√£o para simular envio de SMS
async function sendSMSWithCode(phone: string, code: string) {
  console.log(`üì± SMS enviado para ${phone}:`)
  console.log(`Seu c√≥digo de verifica√ß√£o √©: ${code}`)
  console.log(`Este c√≥digo expira em 10 minutos.`)
  return true
}

export async function POST(request: Request) {
  try {
    console.log("üöÄ Iniciando processo de envio de c√≥digo de verifica√ß√£o")

    // Parse do corpo da requisi√ß√£o
    let body
    try {
      body = await request.json()
    } catch (parseError) {
      console.error("‚ùå Erro ao fazer parse do JSON:", parseError)
      return NextResponse.json({ message: "Formato de requisi√ß√£o inv√°lido" }, { status: 400 })
    }

    const { idAcesso, method } = body

    console.log(`üîê Dados recebidos - ID: ${idAcesso}, m√©todo: ${method}`)

    if (!idAcesso) {
      console.log("‚ùå ID de acesso n√£o fornecido")
      return NextResponse.json({ message: "ID de acesso √© obrigat√≥rio" }, { status: 400 })
    }

    if (!method || (method !== "email" && method !== "sms")) {
      console.log("‚ùå M√©todo de verifica√ß√£o inv√°lido")
      return NextResponse.json({ message: "M√©todo de verifica√ß√£o inv√°lido" }, { status: 400 })
    }

    // Buscar usu√°rio pelo ID de acesso
    console.log(`üîç Buscando usu√°rio com ID de acesso: ${idAcesso}`)

    let user
    try {
      const { data, error } = await supabaseAdmin
        .from("dados_usuario")
        .select("id, nome_completo, email, telefone")
        .eq("id_acesso", idAcesso)
        .single()

      if (error) {
        console.error("‚ùå Erro ao buscar usu√°rio:", error)
        return NextResponse.json({ message: "Usu√°rio n√£o encontrado" }, { status: 404 })
      }

      if (!data) {
        console.log("‚ùå Usu√°rio n√£o encontrado")
        return NextResponse.json({ message: "Usu√°rio n√£o encontrado" }, { status: 404 })
      }

      user = data
      console.log(`‚úÖ Usu√°rio encontrado: ${user.nome_completo}`)
    } catch (dbError) {
      console.error("‚ùå Erro na consulta ao banco:", dbError)
      return NextResponse.json({ message: "Erro ao acessar banco de dados" }, { status: 500 })
    }

    // Verificar se o usu√°rio tem o m√©todo de contato solicitado
    if (method === "email") {
      if (!user.email) {
        console.error("‚ùå Usu√°rio n√£o possui email cadastrado")
        return NextResponse.json({ message: "Usu√°rio n√£o possui email cadastrado" }, { status: 400 })
      }
      console.log(`üìß Email encontrado: ${user.email}`)
    }

    if (method === "sms") {
      if (!user.telefone) {
        console.error("‚ùå Usu√°rio n√£o possui telefone cadastrado")
        return NextResponse.json({ message: "Usu√°rio n√£o possui telefone cadastrado" }, { status: 400 })
      }
      console.log(`üì± Telefone encontrado: ${user.telefone}`)
    }

    // Gerar c√≥digo de verifica√ß√£o (6 d√≠gitos)
    const verificationCode = generateVerificationCode()
    console.log(`üî¢ C√≥digo gerado: ${verificationCode} (APENAS PARA DESENVOLVIMENTO)`)

    // Armazenar c√≥digo em cookie seguro
    const expirationTime = Date.now() + 10 * 60 * 1000 // 10 minutos
    const cookieData = {
      code: verificationCode,
      expires: expirationTime,
      method: method,
    }

    try {
      // Armazenar em cookie seguro
      const cookieStore = cookies()
      const cookieValue = encodeBase64(JSON.stringify(cookieData))

      cookieStore.set(`verification_${idAcesso}`, cookieValue, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        maxAge: 60 * 10, // 10 minutos
        path: "/",
      })

      console.log(`üç™ C√≥digo armazenado em cookie para ID: ${idAcesso}`)
    } catch (cookieError) {
      console.error("‚ùå Erro ao armazenar cookie:", cookieError)
      // Continuar mesmo com erro no cookie
    }

    // Enviar c√≥digo pelo m√©todo escolhido
    try {
      if (method === "email") {
        console.log(`üìß Enviando c√≥digo por email para: ${user.email}`)
        await sendEmailWithCode(user.email, verificationCode, user.nome_completo)
      } else if (method === "sms") {
        console.log(`üì± Enviando c√≥digo por SMS para: ${user.telefone}`)
        await sendSMSWithCode(user.telefone, verificationCode)
      }

      console.log(`‚úÖ C√≥digo enviado com sucesso via ${method}`)

      // Resposta de sucesso - sem incluir o c√≥digo na resposta
      return NextResponse.json({
        message: "C√≥digo de verifica√ß√£o enviado com sucesso",
        success: true,
      })
    } catch (sendError) {
      console.error("‚ùå Erro ao enviar c√≥digo:", sendError)
      return NextResponse.json({ message: "Erro ao enviar c√≥digo de verifica√ß√£o" }, { status: 500 })
    }
  } catch (error) {
    console.error("‚ùå Erro geral ao processar requisi√ß√£o:", error)
    return NextResponse.json({ message: "Erro interno do servidor" }, { status: 500 })
  }
}
